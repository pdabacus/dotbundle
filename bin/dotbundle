#!/bin/bash
printhelp() {
cat << EOF
usage: dotbundle <bundle file> <in>:<out> [<in2>:<out2> ...] [<indir>:<outdir>]

bundle your files into an executable which unpacks them to the new location
(useful for making a bundle of dotfiles to quickly deploy to another machine)

all ascii text, so clipboard copy paste friendly

example:
dotbundle bundle.sh \\
    ~/.vimrc:~/.vimrc \\
    /usr/share/vim/vimfiles/colors/:~/.vim/colors/ \\
    ~/.bashrc
EOF
}

[ -z "$1" ] && printhelp && exit 0
[ -d "$1" ] && echo "error: invalid output bundle: '$1' is a directory" && exit 1
bundle="$1"
shift
ins=()
outs=()

while [ ${#@} -gt 0 ]; do
    in=$(echo $1 | cut -d":" -f1)
    out=$(echo $1 | cut -d":" -f2) #if theres no colon, out and in are the same

    if [ -z "$in" ] || [ -z "$out" ]; then
        echo "error: invalid arg '$1'"
        exit 1
    fi

    if [ -d "$in" ]; then # recursively add files
        IFSBAK=$IFS
        IFS=$'\n'
        files=($(find $in -type f -follow))
        IFS=$IFSBAK
        # remove trailing slash
        in2=$(echo $in | sed "s|/$||")
        out2=$(echo $out | sed "s|/$||")
        for i in ${!files[@]}; do
            ins+=("${files[$i]}")
            out=$(echo ${files[$i]} | sed "s|$in2|$out2|")
            outs+=("$out")
        done
    else
        if [ -f "$in" ]; then
            ins+=("$in")
            outs+=("$out")
        else
            echo "error: file/dir dont exist '$in'"
            exit 1
        fi
    fi

    shift
done

if [ "${#ins[@]}" -eq 0 ]; then
    echo "error: no files specified"
    exit 1
fi

echo "packing files into $bundle"
echo "#!/bin/bash" > $bundle
chmod +x $bundle
for i in ${!ins[@]}; do
    in="${ins[$i]}"
    out="${outs[$i]}"
    echo " * $in -> $out"
    echo "# $in -> $out" >> $bundle
    echo "echo \"unpacking $out\"" >> $bundle
    echo "mkdir -p $(dirname $out)" >> $bundle
    echo "cat << EOFEOF | base64 -d > $out" >> $bundle #in case script uses EOF
    base64 "$in" >> $bundle
    echo "EOFEOF" >> $bundle
    echo >> $bundle
done
